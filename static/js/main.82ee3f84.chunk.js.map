{"version":3,"sources":["SearchBooks.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["SearchBooks","useState","title","setTitle","author","setAuthor","books","setBooks","event","a","preventDefault","url","console","log","fetch","res","json","data","items","className","onSubmit","htmlFor","type","name","placeholder","value","autoComplete","onChange","e","target","filter","book","volumeInfo","imageLinks","map","key","id","src","smallThumbnail","alt","subtitle","authors","categories","pageCount","publishedDate","description","Footer","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRA8EeA,MA7Ef,WAAwB,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEOF,mBAAS,IAFhB,mBAEdG,EAFc,KAENC,EAFM,OAGKJ,mBAAS,IAHd,mBAGdK,EAHc,KAGPC,EAHO,KAIfP,EAAW,uCAAG,WAAOQ,GAAP,mBAAAC,EAAA,6DAClBD,EAAME,iBACAC,EAFY,wDAE2CT,EAF3C,oBAE4DA,EAF5D,qBAE8EE,EAF9E,8EAGlBQ,QAAQC,IAAIF,GAHM,kBAKEG,MAAMH,GALR,cAKVI,EALU,gBAMGA,EAAIC,OANP,OAMVC,EANU,OAOhBL,QAAQC,IAAII,EAAKC,OACjBX,EAASU,EAAKC,OARE,kDAUhBN,QAAQC,IAAR,MAVgB,0DAAH,sDAajB,OACE,oCACE,0BAAMM,UAAU,OAAOC,SAAUpB,GAC/B,2BAAOqB,QAAQ,QAAQF,UAAU,SAAjC,SAGA,2BACEG,KAAK,OACLC,KAAK,QACLC,YAAY,SACZC,MAAOvB,EACPwB,aAAa,MACbP,UAAU,SACVQ,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOJ,UAErC,6BACA,2BAAOJ,QAAQ,QAAQF,UAAU,SAAjC,UAGA,2BACEG,KAAK,OACLC,KAAK,QACLC,YAAY,mBACZC,MAAOrB,EACPsB,aAAa,MACbP,UAAU,SACVQ,SAAU,SAACC,GAAD,OAAOvB,EAAUuB,EAAEC,OAAOJ,UAEtC,6BACA,2CAEF,6BACGnB,EACEwB,QAAO,SAACC,GAAD,OAAUA,EAAKC,WAAWC,cACjCC,KAAI,SAACH,GACJ,OACE,yBAAKZ,UAAU,OAAOgB,IAAKJ,EAAKK,IAC9B,yBACEjB,UAAU,SACVkB,IAAKN,EAAKC,WAAWC,WAAWK,eAChCC,IAAKR,EAAKC,WAAW9B,MAAQ,WAE/B,yBAAKiB,UAAU,WACb,wBAAIA,UAAU,SAASY,EAAKC,WAAW9B,OACvC,wBAAIiB,UAAU,YAAYY,EAAKC,WAAWQ,UAC1C,wBAAIrB,UAAU,UAAUY,EAAKC,WAAWS,SACxC,0BAAMtB,UAAU,SAASY,EAAKC,WAAWU,YACzC,wBAAIvB,UAAU,QAAQY,EAAKC,WAAWW,UAAtC,UACA,4CAAkBZ,EAAKC,WAAWY,eAClC,6BACA,uBAAGzB,UAAU,QAAQY,EAAKC,WAAWa,qB,4BCrDxCC,E,uKAXX,OACE,4BAAQ3B,UAAU,UAChB,mFAEE,6BAFF,2B,GAJa4B,aCcNC,MAXf,WACE,OACE,yBAAK7B,UAAU,OACb,wBAAIA,UAAU,UAAd,oBACA,mEACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.82ee3f84.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nfunction SearchBooks() {\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [books, setBooks] = useState([]);\n  const SearchBooks = async (event) => {\n    event.preventDefault();\n    const url = `https://www.googleapis.com/books/v1/volumes?q=${title}+intitle:${title}+inauthor:${author}&maxResults=40&printType=books&key=AIzaSyCzvFR6UHnhU6EuKVbgcqS_wQpoiCZ3G_E`;\n    console.log(url);\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data.items);\n      setBooks(data.items);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <>\n      <form className=\"form\" onSubmit={SearchBooks}>\n        <label htmlFor=\"query\" className=\"label\">\n          Title\n        </label>\n        <input\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Lolita\"\n          value={title}\n          autoComplete=\"off\"\n          className=\"search\"\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <br />\n        <label htmlFor=\"query\" className=\"label\">\n          Author\n        </label>\n        <input\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Vladimir Nabokov\"\n          value={author}\n          autoComplete=\"off\"\n          className=\"search\"\n          onChange={(e) => setAuthor(e.target.value)}\n        />\n        <br />\n        <button>Search</button>\n      </form>\n      <div>\n        {books\n          .filter((book) => book.volumeInfo.imageLinks)\n          .map((book) => {\n            return (\n              <div className=\"card\" key={book.id}>\n                <img\n                  className=\"poster\"\n                  src={book.volumeInfo.imageLinks.smallThumbnail}\n                  alt={book.volumeInfo.title + \"poster\"}\n                />\n                <div className=\"content\">\n                  <h3 className=\"title\">{book.volumeInfo.title}</h3>\n                  <h4 className=\"subtitle\">{book.volumeInfo.subtitle}</h4>\n                  <h4 className=\"author\">{book.volumeInfo.authors}</h4>\n                  <span className=\"genre\">{book.volumeInfo.categories}</span>\n                  <h5 className=\"page\">{book.volumeInfo.pageCount} pages</h5>\n                  <p>PUBLISH DATE: {book.volumeInfo.publishedDate}</p>\n                  <br />\n                  <p className=\"desc\">{book.volumeInfo.description}</p>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </>\n  );\n}\n\nexport default SearchBooks;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <h6>\n          For feedback, please contact adilahmed1090@gmail.com\n          <br />Â© 2020 Adil-Bub\n        </h6>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBooks from \"./SearchBooks\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"center\">A worm's dungeon</h1>\n      <h6>Search by Title or Title and Author</h6>\n      <SearchBooks />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}